"""Generate reproducible Jupyter notebooks for Lousa risk assessments.

This module creates self-contained notebooks that document the complete evaluation
of a risk note, including:
- The original YAML specification
- Evaluation results and reasoning traces
- Visualizations of the risk posture
- Interactive exploration of evidence and investigations
- Provenance information for audit purposes

Example:
    >>> from lousa.models import RiskNote, Posture
    >>> from lousa.notebook import generate_notebook
    >>> note = RiskNote.model_validate_yaml("path/to/risk_note.yaml")
    >>> notebook_path = generate_notebook(note, output_dir="./notebooks")
"""
from __future__ import annotations

import json
import nbformat as nbf
import yaml
from datetime import datetime
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional, Union, Type, TypeVar, get_origin, get_args

import nbformat as nbf
from nbformat.v4.nbbase import new_code_cell, new_markdown_cell, new_notebook

from lousa.eval import evaluate_note, NoteEvaluationResult, ClaimResult, EvidenceContribution
from .gsn import generate_gsn_diagram as render_gsn
from .models import RiskNote
from .provenance import capture_provenance, format_provenance

# Template strings for notebook sections
_TEMPLATE_INTRO = """# 🛡️ Lousa Risk Assessment

*This notebook was automatically generated by Lousa on {timestamp}*

## Overview
- **Note ID**: `{note_id}`
- **Title**: {title}
- **Overall Posture**: `{posture}`
- **Generated At**: {now}

## Contents
1. [Risk Note Specification](#risk-note-specification)
2. [Evaluation Results](#evaluation-results)
3. [Visualization](#visualization)
4. [Provenance](#provenance)
"""

_TEMPLATE_SPEC = """## Risk Note Specification

```yaml
{yaml_content}
```
"""

_TEMPLATE_EVALUATION = """## Evaluation Results

### Summary
- **Overall Posture**: `{posture}`
- **Generated At**: {timestamp}
- **Evaluation ID**: `{evaluation_id}`

### Claims
{claims_table}
"""

def _format_claims_table(claim_results: list[Any]) -> str:
    """Format claim evaluation results as a markdown table.
    
    Args:
        claim_results: List of ClaimResult objects from evaluation
        
    Returns:
        Formatted markdown table as a string
    """
    rows = [
        "| ID | Title | Posterior | Posture | Evidence |",
        "|----|-------|-----------|----------|-----------|"
    ]
    
    for result in claim_results:
        # Get the number of evidence items (contributions)
        evidence_count = len(getattr(result, 'contributions', []))
        
        rows.append(
            f"| {result.claim_id} | {result.title} | "
            f"{result.posterior:.1%} | "
            f"`{result.posture.value}` | {evidence_count} items |"
        )
    
    return "\n".join(rows)

def _add_visualization_section(nb: nbf.NotebookNode, note: RiskNote, output_dir: Path) -> Path:
    """Add visualization section to the notebook."""
    # Generate GSN diagram
    gsn_path = render_gsn(note, output_dir=output_dir, format="svg")
    
    # Add visualization section
    nb.cells.append(new_markdown_cell("## Visualization"))
    
    # Add GSN diagram
    nb.cells.append(new_markdown_cell(
        "### Goal Structuring Notation (GSN) Diagram\n\n"
        f"<img src='{gsn_path.name}' width='100%' alt='GSN Diagram'>"
    ))
    
    return gsn_path

def _add_provenance_section(nb: nbf.NotebookNode, note: RiskNote, output_dir: Path) -> None:
    """Add provenance information to the notebook."""
    # Capture provenance data
    prov = capture_provenance()
    
    # Add provenance section
    nb.cells.append(new_markdown_cell("## Provenance"))
    
    # Add provenance details
    nb.cells.append(new_markdown_cell("### Execution Context"))
    
    # Add the provenance data as a variable in the notebook
    import json
    # Convert the provenance data to a string with proper Python boolean literals
    prov_str = json.dumps(prov, indent=2)
    # Replace JSON booleans with Python booleans
    prov_str = prov_str.replace(': true', ': True').replace(': false', ': False')
    
    # Add the code cell with the provenance data
    nb.cells.append(new_code_cell(
        "from lousa.provenance import format_provenance\n"
        "import json\n"
        f"provenance = {prov_str}\n"
        "print(format_provenance(provenance))"
    ))
    
    # Add environment information
    nb.cells.append(new_markdown_cell("### Environment"))
    nb.cells.append(new_code_cell(
        'import platform\n'
        'print(f"Python: {platform.python_version()}")\n'
        'print(f"Platform: {platform.platform()}")\n'
        'print(f"Processor: {platform.processor()}")'
    ))

def _serialize_for_json(obj: Any) -> Any:
    """Helper function to serialize objects to JSON-compatible types."""
    if isinstance(obj, Enum):
        return obj.value
    elif hasattr(obj, 'model_dump'):
        return obj.model_dump()
    elif hasattr(obj, 'dict'):
        return obj.dict()
    elif isinstance(obj, datetime):
        return obj.isoformat()
    elif isinstance(obj, (list, tuple)):
        return [_serialize_for_json(x) for x in obj]
    elif isinstance(obj, dict):
        return {k: _serialize_for_json(v) for k, v in obj.items()}
    return str(obj)


def generate_notebook(
    note: RiskNote,
    output_dir: Union[str, Path] = ".",
    include_yaml: bool = True,
    include_gsn: bool = True,
) -> Path:
    """Generate a Jupyter notebook documenting the risk assessment.
    
    Args:
        note: The risk note to document
        output_dir: Directory to save the notebook
        include_yaml: Whether to include the full YAML specification
        include_gsn: Whether to generate and include the GSN diagram
        
    Returns:
        Path to the generated notebook file
        
    Raises:
        FileNotFoundError: If output directory doesn't exist
        RuntimeError: If notebook generation fails
    """
    output_dir = Path(output_dir)
    if not output_dir.exists():
        output_dir.mkdir(parents=True, exist_ok=True)
    elif not output_dir.is_dir():
        raise FileNotFoundError(f"Output path is not a directory: {output_dir}")
    
    # Create a new notebook
    nb = new_notebook()
    
    # Evaluate the note
    evaluation = evaluate_note(note)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S %Z")
    
    # Add introduction
    nb.cells.append(new_markdown_cell(
        _TEMPLATE_INTRO.format(
            timestamp=now,
            note_id=note.id,
            title=note.title,
            posture=evaluation["overall_posture"].value,
            now=now
        )
    ))
    
    # Add YAML specification if requested
    if include_yaml:
        # Use model_dump_json() and format as YAML for better readability
        import yaml
        from pydantic import BaseModel
        
        def pydantic_to_yaml(model: BaseModel) -> str:
            """Convert a Pydantic model to a nicely formatted YAML string."""
            # Convert to dict, handling nested models
            data = model.model_dump(mode='json')
            # Convert to YAML with nice formatting
            return yaml.dump(data, sort_keys=False, default_flow_style=False, width=100)
            
        yaml_content = pydantic_to_yaml(note)
        nb.cells.append(new_markdown_cell(
            _TEMPLATE_SPEC.format(yaml_content=yaml_content)
        ))
    
    # Add evaluation results
    nb.cells.append(new_markdown_cell(
        _TEMPLATE_EVALUATION.format(
            posture=evaluation["overall_posture"].value,
            timestamp=now,
            evaluation_id=hash(f"{note.id}:{now}") % 10**8,
            claims_table=_format_claims_table(evaluation["claims"])
        )
    ))
    
    # Add visualization section if requested
    if include_gsn:
        _add_visualization_section(nb, note, output_dir)
    
    # Add provenance information
    _add_provenance_section(nb, note, output_dir)
    
    # Add interactive exploration section
    nb.cells.extend([
        new_markdown_cell("## Interactive Exploration"),
        new_markdown_cell(
            "Use the cells below to explore the evaluation results programmatically.\n\n"
            "### Available Variables\n"
            "- `note`: The original risk note object\n"
            "- `evaluation`: Full evaluation results (dictionary with 'claims' and 'overall_posture')\n"
            "- `provenance`: Execution context and environment"
        ),
        # Add the evaluation data as a variable in the notebook using JSON serialization
        new_code_cell("# Evaluation results\n"
                    "import json\n"
                    "from lousa.models import Posture\n"
                    "from lousa.eval import ClaimResult, EvidenceContribution\n"
                    "from datetime import datetime\n"
                    f"evaluation_json = '''{json.dumps(evaluation, default=_serialize_for_json)}'''\n"
                    "def _deserialize_claim(data):\n"
                    "    # Convert dictionary back to ClaimResult object\n"
                    "    if 'posture' in data and isinstance(data['posture'], str):\n"
                    "        data['posture'] = Posture(data['posture'])\n"
                    "    if 'contributions' in data:\n"
                    "        data['contributions'] = [\n"
                    "            EvidenceContribution(**c) for c in data['contributions']\n"
                    "        ]\n"
                    "    return ClaimResult(**data)\n"
                    "# Deserialize the evaluation data\n"
                    "evaluation_data = json.loads(evaluation_json)\n"
                    "evaluation = {\n"
                    "    'note_id': evaluation_data['note_id'],\n"
                    "    'title': evaluation_data['title'],\n"
                    "    'evaluated_at': evaluation_data['evaluated_at'],\n"
                    "    'overall_posture': Posture(evaluation_data['overall_posture']),\n"
                    "    'claims': [_deserialize_claim(c) for c in evaluation_data['claims']],\n"
                    "    'recommendations': evaluation_data.get('recommendations', [])\n"
                    "}\n"
                    "print(f'Evaluation complete with {len(evaluation[\"claims\"])} claims')\n"
                    "print(f'Overall posture: {evaluation[\"overall_posture\"].value}')"),
        
        # Example usage
        new_code_cell("# Example: View claim details\n"
                     "for claim in evaluation['claims']:\n"
                     "    print(f\"{claim.claim_id}: {claim.title} ({claim.posture.value})\")\n"
                     "    print(f\"  Posterior: {claim.posterior:.1%}\")\n"
                     "    print(f\"  Evidence: {len(claim.contributions)} items\")\n"
                     "    print()")
    ])
    
    # Write the notebook to disk
    notebook_path = output_dir / f"lousa_{note.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.ipynb"
    nbf.write(nb, notebook_path)
    
    return notebook_path
